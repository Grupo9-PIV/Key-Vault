name: key-vault

services:
  web-server:
    container_name: frontend
    build:
      context: ..
      dockerfile: nginx/Dockerfile
      args:
        - VITE_API_BASE_URL=${VITE_API_BASE_URL}
    ports:
      - 80:80
    depends_on:
      - api
    networks:
      - frontend-network

  api:
    container_name: backend
    build:
      context: ..
      dockerfile: backend/Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - ENVIRONMENT=${ENVIRONMENT}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
    entrypoint: ./entrypoint.sh
    expose:
      - 8000
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend-network
      - frontend-network

  db:
    container_name: postgresql
    image: postgres:17
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGUSER=${PGUSER}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - TZ=${TZ}
    expose:
      - 5432
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: "pg_isready -h db"
      interval: 3s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - 15432:80
    volumes:
      - pgadmin:/var/lib/pgadmin
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend-network

volumes:
  pgdata:
  pgadmin:

networks:
  frontend-network:
  backend-network:
